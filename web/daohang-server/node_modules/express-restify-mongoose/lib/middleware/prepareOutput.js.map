{"version":3,"sources":["../../src/middleware/prepareOutput.js"],"names":[],"mappings":";;AAAA,IAAM,IAAI,QAAQ,QAAR,CAAJ;AACN,IAAM,QAAQ,QAAQ,OAAR,CAAR;;AAEN,OAAO,OAAP,GAAiB,UAAU,OAAV,EAAmB,WAAnB,EAAgC;AAC/C,MAAM,eAAe,QAAQ,iBAAR,EAA2B,OAA3B,CAAf,CADyC;;AAG/C,SAAO,UAAU,GAAV,EAAe,GAAf,EAAoB,IAApB,EAA0B;AAC/B,QAAI,uBAAJ,CAD+B;;AAG/B,YAAQ,IAAI,MAAJ,CAAW,WAAX,EAAR;AACE,WAAK,KAAL;AACE,yBAAiB,QAAQ,QAAR,CADnB;AAEE,cAFF;AADF,WAIO,MAAL;AACE,YAAI,IAAI,GAAJ,CAAQ,UAAR,KAAuB,GAAvB,EAA4B;AAC9B,2BAAiB,QAAQ,UAAR,CADa;SAAhC,MAEO;AACL,2BAAiB,QAAQ,UAAR,CADZ;SAFP;AAKA,cANF;AAJF,WAWO,KAAL,CAXF;AAYE,WAAK,OAAL;AACE,yBAAiB,QAAQ,UAAR,CADnB;AAEE,cAFF;AAZF,WAeO,QAAL;AACE,yBAAiB,QAAQ,UAAR,CADnB;AAEE,cAFF;AAfF,KAH+B;;AAuB/B,UAAM,UAAN,CAAiB,cAAjB,EAAiC,UAAC,UAAD,EAAa,EAAb,EAAoB;AACnD,iBAAW,GAAX,EAAgB,GAAhB,EAAqB,EAArB,EADmD;KAApB,EAE9B,UAAC,GAAD,EAAS;AACV,UAAI,GAAJ,EAAS;AACP,eAAO,aAAa,GAAb,EAAkB,GAAlB,EAAuB,IAAvB,EAA6B,GAA7B,CAAP,CADO;OAAT;;;AADU,UAMN,IAAI,GAAJ,CAAQ,MAAR,EAAgB;AAClB,YAAI,OAAO;AACT,kBAAQ,IAAI,MAAJ;AACR,uBAAa,WAAb;AACA,oBAAU,IAAI,gBAAJ,GAAuB,IAAI,gBAAJ,CAAqB,QAArB,GAAgC,IAAvD;SAHR,CADc;;AAOlB,YAAI,GAAJ,CAAQ,MAAR,GAAiB,QAAQ,MAAR,GAAiB,QAAQ,MAAR,CAAe,YAAf,CAA4B,IAAI,GAAJ,CAAQ,MAAR,EAAgB,IAA5C,CAAjB,GAAqE,IAAI,GAAJ,CAAQ,MAAR,CAPpE;OAApB;;AAUA,UAAI,QAAQ,gBAAR,IAA4B,IAAI,GAAJ,CAAQ,UAAR,EAAoB;AAClD,YAAI,MAAJ,CAAW,EAAE,QAAF,CAAW,QAAQ,gBAAR,CAAX,GAAuC,QAAQ,gBAAR,GAA2B,eAAlE,EAAmF,IAAI,GAAJ,CAAQ,UAAR,CAA9F,CADkD;OAApD;;AAIA,cAAQ,QAAR,CAAiB,GAAjB,EAAsB,GAAtB,EApBU;;AAsBV,UAAI,QAAQ,WAAR,EAAqB;AACvB,gBAAQ,WAAR,CAAoB,GAApB,EAAyB,GAAzB,EAA8B,IAA9B,EADuB;OAAzB;KAtBC,CAFH,CAvB+B;GAA1B,CAHwC;CAAhC","file":"prepareOutput.js","sourcesContent":["const _ = require('lodash')\r\nconst async = require('async')\r\n\r\nmodule.exports = function (options, excludedMap) {\r\n  const errorHandler = require('../errorHandler')(options)\r\n\r\n  return function (req, res, next) {\r\n    let postMiddleware\r\n\r\n    switch (req.method.toLowerCase()) {\r\n      case 'get':\r\n        postMiddleware = options.postRead\r\n        break\r\n      case 'post':\r\n        if (req.erm.statusCode === 201) {\r\n          postMiddleware = options.postCreate\r\n        } else {\r\n          postMiddleware = options.postUpdate\r\n        }\r\n        break\r\n      case 'put':\r\n      case 'patch':\r\n        postMiddleware = options.postUpdate\r\n        break\r\n      case 'delete':\r\n        postMiddleware = options.postDelete\r\n        break\r\n    }\r\n\r\n    async.eachSeries(postMiddleware, (middleware, cb) => {\r\n      middleware(req, res, cb)\r\n    }, (err) => {\r\n      if (err) {\r\n        return errorHandler(req, res, next)(err)\r\n      }\r\n\r\n      // TODO: this will, but should not, filter /count queries\r\n      if (req.erm.result) {\r\n        let opts = {\r\n          access: req.access,\r\n          excludedMap: excludedMap,\r\n          populate: req._ermQueryOptions ? req._ermQueryOptions.populate : null\r\n        }\r\n\r\n        req.erm.result = options.filter ? options.filter.filterObject(req.erm.result, opts) : req.erm.result\r\n      }\r\n\r\n      if (options.totalCountHeader && req.erm.totalCount) {\r\n        res.header(_.isString(options.totalCountHeader) ? options.totalCountHeader : 'X-Total-Count', req.erm.totalCount)\r\n      }\r\n\r\n      options.outputFn(req, res)\r\n\r\n      if (options.postProcess) {\r\n        options.postProcess(req, res, next)\r\n      }\r\n    })\r\n  }\r\n}\r\n"]}