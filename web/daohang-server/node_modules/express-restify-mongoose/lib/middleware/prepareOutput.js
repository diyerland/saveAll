'use strict';

var _ = require('lodash');
var async = require('async');

module.exports = function (options, excludedMap) {
  var errorHandler = require('../errorHandler')(options);

  return function (req, res, next) {
    var postMiddleware = void 0;

    switch (req.method.toLowerCase()) {
      case 'get':
        postMiddleware = options.postRead;
        break;
      case 'post':
        if (req.erm.statusCode === 201) {
          postMiddleware = options.postCreate;
        } else {
          postMiddleware = options.postUpdate;
        }
        break;
      case 'put':
      case 'patch':
        postMiddleware = options.postUpdate;
        break;
      case 'delete':
        postMiddleware = options.postDelete;
        break;
    }

    async.eachSeries(postMiddleware, function (middleware, cb) {
      middleware(req, res, cb);
    }, function (err) {
      if (err) {
        return errorHandler(req, res, next)(err);
      }

      // TODO: this will, but should not, filter /count queries
      if (req.erm.result) {
        var opts = {
          access: req.access,
          excludedMap: excludedMap,
          populate: req._ermQueryOptions ? req._ermQueryOptions.populate : null
        };

        req.erm.result = options.filter ? options.filter.filterObject(req.erm.result, opts) : req.erm.result;
      }

      if (options.totalCountHeader && req.erm.totalCount) {
        res.header(_.isString(options.totalCountHeader) ? options.totalCountHeader : 'X-Total-Count', req.erm.totalCount);
      }

      options.outputFn(req, res);

      if (options.postProcess) {
        options.postProcess(req, res, next);
      }
    });
  };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWRkbGV3YXJlL3ByZXBhcmVPdXRwdXQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFNLElBQUksUUFBUSxRQUFSLENBQUo7QUFDTixJQUFNLFFBQVEsUUFBUSxPQUFSLENBQVI7O0FBRU4sT0FBTyxPQUFQLEdBQWlCLFVBQVUsT0FBVixFQUFtQixXQUFuQixFQUFnQztBQUMvQyxNQUFNLGVBQWUsUUFBUSxpQkFBUixFQUEyQixPQUEzQixDQUFmLENBRHlDOztBQUcvQyxTQUFPLFVBQVUsR0FBVixFQUFlLEdBQWYsRUFBb0IsSUFBcEIsRUFBMEI7QUFDL0IsUUFBSSx1QkFBSixDQUQrQjs7QUFHL0IsWUFBUSxJQUFJLE1BQUosQ0FBVyxXQUFYLEVBQVI7QUFDRSxXQUFLLEtBQUw7QUFDRSx5QkFBaUIsUUFBUSxRQUFSLENBRG5CO0FBRUUsY0FGRjtBQURGLFdBSU8sTUFBTDtBQUNFLFlBQUksSUFBSSxHQUFKLENBQVEsVUFBUixLQUF1QixHQUF2QixFQUE0QjtBQUM5QiwyQkFBaUIsUUFBUSxVQUFSLENBRGE7U0FBaEMsTUFFTztBQUNMLDJCQUFpQixRQUFRLFVBQVIsQ0FEWjtTQUZQO0FBS0EsY0FORjtBQUpGLFdBV08sS0FBTCxDQVhGO0FBWUUsV0FBSyxPQUFMO0FBQ0UseUJBQWlCLFFBQVEsVUFBUixDQURuQjtBQUVFLGNBRkY7QUFaRixXQWVPLFFBQUw7QUFDRSx5QkFBaUIsUUFBUSxVQUFSLENBRG5CO0FBRUUsY0FGRjtBQWZGLEtBSCtCOztBQXVCL0IsVUFBTSxVQUFOLENBQWlCLGNBQWpCLEVBQWlDLFVBQUMsVUFBRCxFQUFhLEVBQWIsRUFBb0I7QUFDbkQsaUJBQVcsR0FBWCxFQUFnQixHQUFoQixFQUFxQixFQUFyQixFQURtRDtLQUFwQixFQUU5QixVQUFDLEdBQUQsRUFBUztBQUNWLFVBQUksR0FBSixFQUFTO0FBQ1AsZUFBTyxhQUFhLEdBQWIsRUFBa0IsR0FBbEIsRUFBdUIsSUFBdkIsRUFBNkIsR0FBN0IsQ0FBUCxDQURPO09BQVQ7OztBQURVLFVBTU4sSUFBSSxHQUFKLENBQVEsTUFBUixFQUFnQjtBQUNsQixZQUFJLE9BQU87QUFDVCxrQkFBUSxJQUFJLE1BQUo7QUFDUix1QkFBYSxXQUFiO0FBQ0Esb0JBQVUsSUFBSSxnQkFBSixHQUF1QixJQUFJLGdCQUFKLENBQXFCLFFBQXJCLEdBQWdDLElBQXZEO1NBSFIsQ0FEYzs7QUFPbEIsWUFBSSxHQUFKLENBQVEsTUFBUixHQUFpQixRQUFRLE1BQVIsR0FBaUIsUUFBUSxNQUFSLENBQWUsWUFBZixDQUE0QixJQUFJLEdBQUosQ0FBUSxNQUFSLEVBQWdCLElBQTVDLENBQWpCLEdBQXFFLElBQUksR0FBSixDQUFRLE1BQVIsQ0FQcEU7T0FBcEI7O0FBVUEsVUFBSSxRQUFRLGdCQUFSLElBQTRCLElBQUksR0FBSixDQUFRLFVBQVIsRUFBb0I7QUFDbEQsWUFBSSxNQUFKLENBQVcsRUFBRSxRQUFGLENBQVcsUUFBUSxnQkFBUixDQUFYLEdBQXVDLFFBQVEsZ0JBQVIsR0FBMkIsZUFBbEUsRUFBbUYsSUFBSSxHQUFKLENBQVEsVUFBUixDQUE5RixDQURrRDtPQUFwRDs7QUFJQSxjQUFRLFFBQVIsQ0FBaUIsR0FBakIsRUFBc0IsR0FBdEIsRUFwQlU7O0FBc0JWLFVBQUksUUFBUSxXQUFSLEVBQXFCO0FBQ3ZCLGdCQUFRLFdBQVIsQ0FBb0IsR0FBcEIsRUFBeUIsR0FBekIsRUFBOEIsSUFBOUIsRUFEdUI7T0FBekI7S0F0QkMsQ0FGSCxDQXZCK0I7R0FBMUIsQ0FId0M7Q0FBaEMiLCJmaWxlIjoicHJlcGFyZU91dHB1dC5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IF8gPSByZXF1aXJlKCdsb2Rhc2gnKVxyXG5jb25zdCBhc3luYyA9IHJlcXVpcmUoJ2FzeW5jJylcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdGlvbnMsIGV4Y2x1ZGVkTWFwKSB7XHJcbiAgY29uc3QgZXJyb3JIYW5kbGVyID0gcmVxdWlyZSgnLi4vZXJyb3JIYW5kbGVyJykob3B0aW9ucylcclxuXHJcbiAgcmV0dXJuIGZ1bmN0aW9uIChyZXEsIHJlcywgbmV4dCkge1xyXG4gICAgbGV0IHBvc3RNaWRkbGV3YXJlXHJcblxyXG4gICAgc3dpdGNoIChyZXEubWV0aG9kLnRvTG93ZXJDYXNlKCkpIHtcclxuICAgICAgY2FzZSAnZ2V0JzpcclxuICAgICAgICBwb3N0TWlkZGxld2FyZSA9IG9wdGlvbnMucG9zdFJlYWRcclxuICAgICAgICBicmVha1xyXG4gICAgICBjYXNlICdwb3N0JzpcclxuICAgICAgICBpZiAocmVxLmVybS5zdGF0dXNDb2RlID09PSAyMDEpIHtcclxuICAgICAgICAgIHBvc3RNaWRkbGV3YXJlID0gb3B0aW9ucy5wb3N0Q3JlYXRlXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHBvc3RNaWRkbGV3YXJlID0gb3B0aW9ucy5wb3N0VXBkYXRlXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIGNhc2UgJ3B1dCc6XHJcbiAgICAgIGNhc2UgJ3BhdGNoJzpcclxuICAgICAgICBwb3N0TWlkZGxld2FyZSA9IG9wdGlvbnMucG9zdFVwZGF0ZVxyXG4gICAgICAgIGJyZWFrXHJcbiAgICAgIGNhc2UgJ2RlbGV0ZSc6XHJcbiAgICAgICAgcG9zdE1pZGRsZXdhcmUgPSBvcHRpb25zLnBvc3REZWxldGVcclxuICAgICAgICBicmVha1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jLmVhY2hTZXJpZXMocG9zdE1pZGRsZXdhcmUsIChtaWRkbGV3YXJlLCBjYikgPT4ge1xyXG4gICAgICBtaWRkbGV3YXJlKHJlcSwgcmVzLCBjYilcclxuICAgIH0sIChlcnIpID0+IHtcclxuICAgICAgaWYgKGVycikge1xyXG4gICAgICAgIHJldHVybiBlcnJvckhhbmRsZXIocmVxLCByZXMsIG5leHQpKGVycilcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gVE9ETzogdGhpcyB3aWxsLCBidXQgc2hvdWxkIG5vdCwgZmlsdGVyIC9jb3VudCBxdWVyaWVzXHJcbiAgICAgIGlmIChyZXEuZXJtLnJlc3VsdCkge1xyXG4gICAgICAgIGxldCBvcHRzID0ge1xyXG4gICAgICAgICAgYWNjZXNzOiByZXEuYWNjZXNzLFxyXG4gICAgICAgICAgZXhjbHVkZWRNYXA6IGV4Y2x1ZGVkTWFwLFxyXG4gICAgICAgICAgcG9wdWxhdGU6IHJlcS5fZXJtUXVlcnlPcHRpb25zID8gcmVxLl9lcm1RdWVyeU9wdGlvbnMucG9wdWxhdGUgOiBudWxsXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXEuZXJtLnJlc3VsdCA9IG9wdGlvbnMuZmlsdGVyID8gb3B0aW9ucy5maWx0ZXIuZmlsdGVyT2JqZWN0KHJlcS5lcm0ucmVzdWx0LCBvcHRzKSA6IHJlcS5lcm0ucmVzdWx0XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChvcHRpb25zLnRvdGFsQ291bnRIZWFkZXIgJiYgcmVxLmVybS50b3RhbENvdW50KSB7XHJcbiAgICAgICAgcmVzLmhlYWRlcihfLmlzU3RyaW5nKG9wdGlvbnMudG90YWxDb3VudEhlYWRlcikgPyBvcHRpb25zLnRvdGFsQ291bnRIZWFkZXIgOiAnWC1Ub3RhbC1Db3VudCcsIHJlcS5lcm0udG90YWxDb3VudClcclxuICAgICAgfVxyXG5cclxuICAgICAgb3B0aW9ucy5vdXRwdXRGbihyZXEsIHJlcylcclxuXHJcbiAgICAgIGlmIChvcHRpb25zLnBvc3RQcm9jZXNzKSB7XHJcbiAgICAgICAgb3B0aW9ucy5wb3N0UHJvY2VzcyhyZXEsIHJlcywgbmV4dClcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9XHJcbn1cclxuIl19
//# sourceMappingURL=prepareOutput.js.map